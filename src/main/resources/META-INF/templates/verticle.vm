package ${model.pkgName};

import com.thwt.core.annotation.Generated;
import com.thwt.core.annotation.jmx.ServiceMBean;
import com.thwt.core.service.DefaultServiceOptions;
import com.thwt.core.service.ServiceVerticle;
import com.thwt.core.vertx.VertxKernelContext;
import com.thwt.core.service.ModuleStatus;

import com.thwt.core.async.AsyncEvent;
import com.thwt.core.util.Consumer;
#foreach($stmt in $model.imports)
import $stmt;
#end

/**
 * auto generated by service code generator, any modification to this file would be overridden !
 *
 */
@Generated
public class ${model.name} extends ServiceVerticle<${model.targetObjectClass}> {

  private ${model.targetObjectClass} targetObject;
  #if($model.fields)
  #foreach($field in $model.fields)
  	${field.javaStatement}
  #end
  #end
  #if($model.commandHandlers)
  private InjectionPoint cmdRegistryIjp = new AbstractServiceInjectionPoint<CommandRegistry>(CommandRegistry.class, false) {
		
		  @Override
		  protected void injectValue(CommandRegistry value) {
		  }
		
		  @Override
		  protected void uninjectValue() {
		  }
		  
		  @Override
		  public String toString() {
		    return "Mock Injection point of CommandRegistry in module :"+getModuleId();
		  }
	};
 #end
	
  public ${model.name}(ServiceMBean ann, VertxKernelContext ctx, ModuleStatus mstatus) {
    super(ann, ctx, mstatus);
  }
  @Override
  protected void collectInjectionPoints() {
  #if($model.injections)
  #foreach($injection in $model.injections)
    addInjectionPoint(this.${injection});
  #end
  #end
  #if($model.commandHandlers)
    addInjectionPoint(this.cmdRegistryIjp);
  #end
  }  

  @Override
  protected ${model.targetObjectClass} initTargetObject(DefaultServiceOptions options) {
    if(this.targetObject == null) {
      this.targetObject = new ${model.targetObjectClass}();
      ${model.targetOptionsClass} opts = options.getOptions(${model.targetOptionsClass}.class, null);
      if(opts != null) {
        opts.updateTo(this.targetObject);
      }
    }
    return this.targetObject;
  }

  @Override
  protected void startService(final Consumer<AsyncEvent<Void>> handler) {
  #if(!${model.onStart})
    handler.accept(AsyncEvent.Factory.succeededEvent());
  #else
  #if(!$model.asyncStart)
    try {
      ${model.onStart.generateCallStatement("targetObject","fut")};
      handler.accept(AsyncEvent.Factory.succeededEvent());
    }catch(Throwable t) {
      handler.accept(AsyncEvent.Factory.failedEvent(t));
    }
  #else
    try {
      AsyncFuture<Void> fut = AsyncEvent.Factory.future();
      fut.setHandler(handler);
      ${model.onStart.generateCallStatement("targetObject","fut")};
    }catch(Throwable t) {
      handler.accept(AsyncEvent.Factory.failedEvent(t));
    }
  #end
  #end
  }

  @Override
  protected void stopService(Consumer<AsyncEvent<Void>> handler) {
  #if(!$model.onStop)
    handler.accept(AsyncEvent.Factory.succeededEvent());
  #else
  #if(!$model.asyncStop)
    try {
      ${model.onStop.generateCallStatement("targetObject","fut")};
      handler.accept(AsyncEvent.Factory.succeededEvent());
    }catch(Throwable t) {
      handler.accept(AsyncEvent.Factory.failedEvent(t));
    }
  #else
    try {
      AsyncFuture<Void> fut = AsyncEvent.Factory.future();
      fut.setHandler(handler);
      ${model.onStop.generateCallStatement("targetObject","fut")};
     }catch(Throwable t) {
      handler.accept(AsyncEvent.Factory.failedEvent(t));
    }
  #end
  #end
  }

  @Override
  protected <T> T getServiceHandler(Class<T> clazz) {
#if($model.handlers)
#foreach($handler in $model.handlers)
     if(clazz == ${handler.clazz}.class) {
      return clazz.cast(${handler.generateGetStatement("targetObject","clazz")});
    }
#end
#end
    return clazz.cast(this.targetObject);
  }

    @Override
    protected void collectMessageHandlers() {
#if($model.eventMessageHandlers)
#foreach($handler in $model.eventMessageHandlers)
#if($handler.channel)
      addMessageHandler(new AbstractMessageHandler<${handler.clazz.simpleName}>(${handler.clazz.simpleName}.class,"${handler.channel}") {

        @Override
        protected void handleMessage(Message<${handler.clazz.simpleName}> msg) {
           ${handler.target.generateCallStatement("targetObject","msg")};
        }
      });
#else
      addMessageHandler(new AbstractMessageHandler<${handler.clazz.simpleName}>(${handler.clazz.simpleName}.class) {

        @Override
        protected void handleMessage(Message<${handler.clazz.simpleName}> msg) {
           ${handler.target.generateCallStatement("targetObject","msg")};
        }
      });
#end
#end
#end      
    }
    
#if($model.commandHandlers)
    @SuppressWarnings("unchecked")
    @Override
    protected void collectCommandHandlers() {
#foreach($handler in $model.commandHandlers)
#if($handler.async)
		addCommandHandler("${handler.cmdName}", (ctx, cmd) -> {
			return new AsyncEventMaybe<>(handler -> {
				context.runOnContext((ar) -> {
				    AuthUser user = ctx.getUser();
                	    AuthUser prev = AuthUser.getCurrentuser();
                	    try {
                	        AuthUser.setCurrentuser(user);
#if($handler.hasContext)
				        ${handler.target.generateCallStatement("targetObject","ctx", "(${handler.cmdClass.simpleName})cmd")}.subscribe(RxJavaHelper.${handler.toObserverMethod}(handler));
#else
				        ${handler.target.generateCallStatement("targetObject", "(${handler.cmdClass.simpleName})cmd")}.subscribe(RxJavaHelper.${handler.toObserverMethod}(handler));
#end
					} finally {
						AuthUser.setCurrentuser(prev);
					}
				});
			});
		});
#else
		addCommandHandler("${handler.cmdName}", (ctx, cmd) -> {
			return new AsyncEventMaybe<>(handler -> {
			    context.runOnContext((ar) -> {
				try {
					getkernelContext().getExecutor().executeBlocking((fut) -> {
					    AuthUser user = ctx.getUser();
                	        AuthUser prev = AuthUser.getCurrentuser();
						try {
						    AuthUser.setCurrentuser(user);
#if(	$handler.voidReturn)
#if($handler.hasContext)
      						${handler.target.generateCallStatement("targetObject","ctx","(${handler.cmdClass.simpleName})cmd")};
#else
							${handler.target.generateCallStatement("targetObject","(${handler.cmdClass.simpleName})cmd")};
#end
							fut.complete();
#else					    
							fut.complete(
#if($handler.hasContext)
      							${handler.target.generateCallStatement("targetObject","ctx","(${handler.cmdClass.simpleName})cmd")}
#else
								${handler.target.generateCallStatement("targetObject","(${handler.cmdClass.simpleName})cmd")}
#end
							);
#end
						} catch (Throwable t) {
							fut.fail(t);
						} finally {
						    AuthUser.setCurrentuser(prev);
						}
					}).subscribe(RxJavaHelper.toMaybeObserver(handler));
				} catch (Throwable t) {
					handler.accept(AsyncEvent.Factory.failedEvent(t));
				}
				});
			});
		});
#end
#end
    }
#end      
    
    
    #if($model.onServerReady)
    @Override
    protected void onServerReady() {
          try {
             ${model.onServerReady.generateCallStatement("targetObject")};
          }catch(Throwable t) {
             log.warn("Caught throwable when invoid on server ready method on moudle :{}", t, getModuleId());
          }
    }
    #end

}
