package ${model.pkgName};

import com.thwt.core.annotation.Generated;
import com.thwt.core.json.api.JsonConverter;
import com.thwt.core.annotation.service.Converter;
#foreach($stmt in $model.imports)
import $stmt;
#end
#foreach($stmt in $model.staticImports)
import $stmt;
#end


import com.thwt.core.json.api.IJsonObject;

/**
 * auto generated by service code generator, any modification to this file would be overridden !!!
 *
 */
@Generated
@Converter("${model.category}")
public class ${model.name} implements JsonConverter<${model.targetClass}> {

  @Override
  public ${model.targetClass} fromJson(IJsonObject json, final ${model.targetClass} obj) {
#if($model.fromProperties)
#foreach($fld in $model.fromProperties) 
     if(json.containsKey("${fld.mappingName}")) {
##          Object value = json.getValue("${fld.mappingName}");
#if($fld.isValue())
#valueFieldFromJson($fld)
#else
#if($fld.isList())
#listFieldFromJson($fld)
#elseif($fld.isSet())
#setFieldFromJson($fld)
#elseif($fld.isMap())
#mapFieldFromJson($fld)
#end
#end
      }    
#end
#end   
      return obj;
      
  }

  @Override
  public IJsonObject toJson(${model.targetClass} obj, IJsonObject json) {
#if($model.toProperties)
#foreach($fld in $model.toProperties)
#if($fld.isValue())
#valueFieldToJson($fld)
#else
#if($fld.isList())
#if($fld.mappingProperties)
			json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), value -> {
			    if(value == null) {
			        return null;
			    }
				IJsonObject result = IJsonObject.newJsonObject();
#foreach($prop in $fld.mappingProperties) 
        			JsonHelper.toJsonObject(result, value.${prop.getterMethod}(), "${prop.mappingName}", ${prop.type.simpleName}.class, null);
#end    
				return result;
			}));
#else
            json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), null));
#end
#elseif($fld.isSet())
#if($fld.mappingProperties)
			json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), value -> {
			    if(value == null) {
			        return null;
			    }
				IJsonObject result = IJsonObject.newJsonObject();
#foreach($prop in $fld.mappingProperties) 
        			JsonHelper.toJsonObject(result, value.${prop.getterMethod}(), "${prop.mappingName}", ${prop.type.simpleName}.class, null);
#end    
				return result;
			}));
#else
            json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), null));
#end
#elseif($fld.isMap())
			json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), value -> {
			    if(value == null) {
			        return null;
			    }
				IJsonObject result = IJsonObject.newJsonObject();
#foreach($prop in $fld.mappingProperties) 
        			JsonHelper.toJsonObject(result, value.${prop.getterMethod}(), "${prop.mappingName}", ${prop.type.simpleName}.class, null);
#end    
				return result;
			}));

#if($fld.mappingProperties)
#else
            json.put("${fld.mappingName}", JsonHelper.toJsonArray(${fld.type.simpleName}.class, obj.${fld.getterMethod}(), null));
#end
#end
#end
#end
#end
    return json;
  }

  @Override
  public String getJsonName() {
    return "${model.jsonName}";
  }
  
  @Override
  public String getCategory() {
    return "${model.category}";
  }

  @Override
  public Class<${model.targetClass}> getObjectType() {
    return ${model.targetClass}.class;
  }

  @Override
  public ${model.targetClass} newDataObject() {
    return new ${model.targetClass}();
  }

}
